Java8的理念想法：
    *Stream API
    *向方法传递代码的技巧
    *接口中的默认方法

    Java8提供了一个新的API（称为“流”，Stream），它支持许多处理数据的并行操作，其思路和在数据库查询语言中的思路类似——用更高级的方式表达想要
    的东西，而由“实现”（在这里是Steams库）来选择最佳低级执行机制。这样就可以避免用synchronized编写代码，这一代码不仅容易出错，而且在多核
    CPU上执行所需的成本也很高。

    从有点修正主义的角度来看，在Java8中加入Streams可以看作把另外两项扩充加入Java8的直接原因：把代码传递给方法的简洁方式（方法引用、Lambda）
    和接口中的默认方法。

    “把代码传递给方法”不仅仅是Java8中Streams的一个结果，它提供了一种新的方式，这种方式简洁表达了行为参数化。

    Java8里面将代码传递给方法的功能（同时也能够返回代码并将其包含在数据结构中）还让我们能够使用一套新的技巧，通常称为函数式编程。一言以蔽之，
    这种被函数式编界称为函数的代码，可以被来回传递加以组合，以产生强大的编程语汇。

这一章是整体脉络

    编程概念
    。流处理：
      流是一系列数据项，一次只生成一项（流在不同“加工站”以运行一般是并行的）
      好处：
       可以在一个更高的抽象层次上写Java8代码，思路变成了把这样的流变成了那样的流（像写数据库查询语句），而不是一次只处理一个项目
       Java8透明地把输入的不相关部分拿到几个CPU内核上分别执行了Stream操作流水线

    。行为参数化把代码传递给方法

    。并行与共享的可变数据
       前面流所说的并行的前提是不能访问共享可变数据

    没有共享的可变数据+将代码传递给其他方法的能力——>函数式编程范式的基石