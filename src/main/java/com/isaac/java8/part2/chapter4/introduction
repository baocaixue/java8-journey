引入流
{
    什么是流
    集合和流
    内部迭代和外部迭代
    中间操作与终端操作
}

*流是什么
    流是Java API的新成员，允许以声明性的方式处理数据集合（通过查询语句来表达，而不是临时编写一个实现）。可以把它们看成遍历数据集的高级迭代器。
    此外，流还可以透明地并行处理。

*流简介
    简短定义：”从支持数据处理操作的源生成的元素序列“。
    元素序列——与集合一样，流也提供了一个接口，可以访问特定元素类型的一组有序值。不同的是，集合是数据结构，所以它的主要目的是以特定的时间/空间
    复杂存储和访问元素。但流的目的在于计算，集合讲的是数据，流讲的是计算。
    源——流会使用一个提供数据的源，如集合、数组或输入输出资源。注意，有序集合生成流时会保留原有的顺。由列表生成的流，其元素顺序于列表一致。
    数据处理操作——流的数据处理功能支持类似于数据库的操作，以及函数式编程语言中的常用操作。流操作可以顺序执行，也可以并行

    另，流操作还有两个重要的特点：
    流水线——很多流操作本身会返回一个流，这样多个操作可以链接起来，形成一个大的流水线。这让一些优化成为可能，如延迟和短路。流水线操作可以看作对
    数据源进行数据库式查询。
    内部迭代——与使用迭代器显示迭代的集合不同，流的迭代操作是在背后进行的。


*流与集合
    简单的例子：
    存在DVD里的电影，这就是一个集合（也许是字节，也许是帧），它包含了整个数据结构。再来想想在互联网上通过视频流看同样的电影，现在这是一个流（
    字节流或帧流）。流媒体视频播放器只要提前下载用户观看位置那几帧就可以了，这样不用等到流中大部分值计算出来，就可以显示流的开始部分了。特别要
    注意，视频播放器可能没有将整个流作为集合，保存所需要的内存缓冲区。

    粗略地说，集合和流之间的差异在于什么时候计算。集合是一个内存中的数据结构，它包含数据结构中目前所有的值——集合中的每个元素都得先算出来才能添
    加到集合中。

    相比之下，流则是概念上固定的数据结构（不能添加或删除元素），其元素则是按需计算的。从另一个角度看：流就像一个延迟创建的集合，只有在消费者要
    求的时候才会计算值（用管理学的话说就是需求驱动，甚至是实时制造）

    -只能遍历一次（流只能消费一次）
    注意，和迭代器类似（在Java核心技术卷二中比作高级的迭代器），流只能遍历一次。

    -外部迭代和内部迭代
    使用Collection接口需要用户去做迭代（如for-each），这称为外部迭代。相反，Streams库使用内部迭代——它帮你把迭代做了，还把得到的流值存在了
    某个地方，你只要给出一个函数说要干什么就可以了。

    内部迭代为透明地并行处理、更优化处理提供了可能。


*流操作（中间操作&&终端操作）
    -中间操作
    诸如filter、sorted等中间操作会返回另一个流，这让多个操作可以连接起来形成一个查询。重要的是，除非流水线上触发一个终端操作，否则中间操作不
    会执行任何处理，这是因为中间操作一般可以合并起来，在终端操作实一次性全部处理

    -终端操作
    终端操作会从流的流水线生成结果。其结果是任何不是流的值。

    -使用流
    流的使用一般包括三件事：
    。一个数据源（如集合）来执行一个查询
    。一个中间操作链，形成一条流的流水线
    。一个终端操作，执行流水线，并生成结果