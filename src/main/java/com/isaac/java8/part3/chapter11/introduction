CompletableFuture 组合式异步编程
{
    创建异步计算，并获取计算结果
    使用非阻塞操作提升吞吐量
    设计和实现异步API
    如何以异步的方式使用同步API
    如何对两个或多个异步操作进行流水线和合并操作
    如何处理异步操作的完成状态
}

*并发与并行
    并行：并行处理的工具——分支/合并框架，将一个操作且分为多个子操作，在多个不同核、CPU甚至是机器上并行这些子操作

    并发：目标是同一个CPU上执行几个松耦合的人人，充分利用CPU的核，让其足够忙碌，从而最大化程序的吞吐量。Future接口，尤其是它的新版实现
    CompletableFuture，是处理这种情况的利器。

*Future接口的局限性
    Future接口提供了方法来检测异步计算是否已经结束（使用isDone方法），等待异步操作结束，以及获取计算的结果。但是这些特性还不足以编写出简介的
    并发代码。比如，很难表述Future结果之间的依赖性；从文字描述上这很简单，“当长时间计算任务完成时，请将该计算的结果通知到另一个长时间运行的计
    算任务，这两个计算任务都完成后，将计算的结果与另一个查询操作结果合并”。但是，使用Future中提供的方法完成这样的操作又是另外一回事。这也是需
    要更具描述能力的特性的原因，比如下面这些。

    。将两个异步计算合并为一个——这两个异步计算之间相互独立，同时第二个又依赖于第一个的结果。
    。等待Future集合中的所有任务都完成。
    。仅等待Future集合中最快结束的任务完成（有可能因为它们试图通过不同的方式计算同一个值），并返回结果。
    。通过编程方式完成一个Future任务的执行（即以手工设定异步操作结果的方式）。
    。应对Future的完成事件（即当Future的完成事件发生时会受到通知，并能使用Future计算的结果进行下一步的操作，而不是简单地阻塞等待操作结果）。

    TIPS:从某个角度看，可以说CompletableFuture和Future的关系就跟Stream和Collection的关系一样